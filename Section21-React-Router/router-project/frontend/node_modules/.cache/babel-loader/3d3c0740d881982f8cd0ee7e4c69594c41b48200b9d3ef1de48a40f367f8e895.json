{"ast":null,"code":"var _jsxFileName = \"E:\\\\Frontend Courses\\\\React-Course-Learning\\\\Section21-React-Router\\\\router-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport EventsList from '../components/EventsList';\nimport { useLoaderData } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Events() {\n  _s();\n  const events = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Events, \"0qsQ0LJMbp4ZAcOenpedLepO/y4=\", false, function () {\n  return [useLoaderData];\n});\n_c = Events;\nexport default Events;\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: 'COuld not fetch Events'\n    }));\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"names":["EventsList","useLoaderData","jsxDEV","_jsxDEV","Fragment","_Fragment","Events","_s","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","Response","JSON","stringify","message","resData","json","$RefreshReg$"],"sources":["E:/Frontend Courses/React-Course-Learning/Section21-React-Router/router-project/frontend/src/pages/Events.js"],"sourcesContent":["import EventsList from '../components/EventsList';\r\nimport { useLoaderData } from 'react-router-dom';\r\n\r\nfunction Events() {\r\n    const events = useLoaderData();\r\n    return (\r\n        <>\r\n            <EventsList events={events} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Events;\r\n\r\nexport async function loader() {\r\n    const response = await fetch('http://localhost:8080/events');\r\n\r\n    if (!response.ok) {\r\n        throw new Response(JSON.stringify({ message: 'COuld not fetch Events'}))\r\n    } else {\r\n        const resData = await response.json();\r\n        return resData.events;\r\n    }\r\n}"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAASC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEjD,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAMC,MAAM,GAAGP,aAAa,CAAC,CAAC;EAC9B,oBACIE,OAAA,CAAAE,SAAA;IAAAI,QAAA,eACIN,OAAA,CAACH,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAChC,CAAC;AAEX;AAACN,EAAA,CAPQD,MAAM;EAAA,QACIL,aAAa;AAAA;AAAAa,EAAA,GADvBR,MAAM;AASf,eAAeA,MAAM;AAErB,OAAO,eAAeS,MAAMA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAwB,CAAC,CAAC,CAAC;EAC5E,CAAC,MAAM;IACH,MAAMC,OAAO,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACrC,OAAOD,OAAO,CAACf,MAAM;EACzB;AACJ;AAAC,IAAAM,EAAA;AAAAW,YAAA,CAAAX,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}